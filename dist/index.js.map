{"version":3,"sources":["../src/services/browser.ts","../src/index.ts"],"sourcesContent":["import { generateText, type IBrowserService, trimTokens } from \"@elizaos/core\";\nimport { parseJSONObjectFromText } from \"@elizaos/core\";\nimport { Service } from \"@elizaos/core\";\nimport { settings } from \"@elizaos/core\";\nimport { type IAgentRuntime, ModelClass, ServiceType } from \"@elizaos/core\";\nimport { stringToUuid } from \"@elizaos/core\";\nimport { PlaywrightBlocker } from \"@cliqz/adblocker-playwright\";\nimport CaptchaSolver from \"capsolver-npm\";\nimport { type Browser, type BrowserContext, chromium, type Page } from \"playwright\";\nimport { elizaLogger } from \"@elizaos/core\";\n\nasync function generateSummary(runtime: IAgentRuntime, text: string): Promise<{ title: string; description: string }> {\n  // make sure text is under 128k characters\n  text = await trimTokens(text, 100000, runtime);\n\n  const prompt = `Please generate a concise summary for the following text:\n\n  Text: \"\"\"\n  ${text}\n  \"\"\"\n\n  Respond with a JSON object in the following format:\n  \\`\\`\\`json\n  {\n    \"title\": \"Generated Title\",\n    \"summary\": \"Generated summary and/or description of the text\"\n  }\n  \\`\\`\\``;\n\n  const response = await generateText({\n    runtime,\n    context: prompt,\n    modelClass: ModelClass.SMALL,\n  });\n\n  const parsedResponse = parseJSONObjectFromText(response);\n\n  if (parsedResponse) {\n    return {\n      title: parsedResponse.title,\n      description: parsedResponse.summary,\n    };\n  }\n\n  return {\n    title: \"\",\n    description: \"\",\n  };\n}\n\ntype PageContent = {\n  title: string;\n  description: string;\n  bodyContent: string;\n};\n\nexport class BrowserService extends Service implements IBrowserService {\n  private browser: Browser | undefined;\n  private context: BrowserContext | undefined;\n  private blocker: PlaywrightBlocker | undefined;\n  private captchaSolver: CaptchaSolver;\n  private cacheKey = \"content/browser\";\n\n  static serviceType: ServiceType = ServiceType.BROWSER;\n\n  static register(runtime: IAgentRuntime): IAgentRuntime {\n    // since we are lazy loading, do nothing\n    return runtime;\n  }\n\n  getInstance(): IBrowserService {\n    return BrowserService.getInstance();\n  }\n\n  constructor() {\n    super();\n    this.browser = undefined;\n    this.context = undefined;\n    this.blocker = undefined;\n    this.captchaSolver = new CaptchaSolver(settings.CAPSOLVER_API_KEY || \"\");\n  }\n\n  async initialize() {}\n\n  async initializeBrowser() {\n    if (!this.browser) {\n      this.browser = await chromium.launch({\n        headless: true,\n        args: [\n          \"--disable-dev-shm-usage\", // Uses /tmp instead of /dev/shm. Prevents memory issues on low-memory systems\n          \"--block-new-web-contents\", // Prevents creation of new windows/tabs\n        ],\n      });\n\n      const platform = process.platform;\n      let userAgent = \"\";\n\n      // Change the user agent to match the platform to reduce bot detection\n      switch (platform) {\n        case \"darwin\":\n          userAgent = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\";\n          break;\n        case \"win32\":\n          userAgent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\";\n          break;\n        case \"linux\":\n          userAgent = \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\";\n          break;\n        default:\n          userAgent = \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\";\n      }\n\n      this.context = await this.browser.newContext({\n        userAgent,\n        acceptDownloads: false,\n      });\n\n      this.blocker = await PlaywrightBlocker.fromPrebuiltAdsAndTracking(fetch);\n    }\n  }\n\n  async closeBrowser() {\n    if (this.context) {\n      await this.context.close();\n      this.context = undefined;\n    }\n    if (this.browser) {\n      await this.browser.close();\n      this.browser = undefined;\n    }\n  }\n\n  async getPageContent(url: string, runtime: IAgentRuntime): Promise<PageContent> {\n    await this.initializeBrowser();\n    return await this.fetchPageContent(url, runtime);\n  }\n\n  private getCacheKey(url: string): string {\n    return stringToUuid(url);\n  }\n\n  private async fetchPageContent(url: string, runtime: IAgentRuntime): Promise<PageContent> {\n    const cacheKey = this.getCacheKey(url);\n    const cached = await runtime.cacheManager.get<{\n      url: string;\n      content: PageContent;\n    }>(`${this.cacheKey}/${cacheKey}`);\n\n    if (cached) {\n      return cached.content;\n    }\n\n    let page: Page | undefined;\n\n    try {\n      if (!this.context) {\n        elizaLogger.log(\"Browser context not initialized. Call initializeBrowser() first.\");\n      }\n\n      page = await this.context.newPage();\n\n      // Enable stealth mode\n      await page.setExtraHTTPHeaders({\n        \"Accept-Language\": \"en-US,en;q=0.9\",\n      });\n\n      // Apply ad blocker\n      if (this.blocker) {\n        await this.blocker.enableBlockingInPage(page);\n      }\n\n      const response = await page.goto(url, { waitUntil: \"networkidle\" });\n\n      if (!response) {\n        elizaLogger.error(\"Failed to load the page\");\n      }\n\n      if (response.status() === 403 || response.status() === 404) {\n        return await this.tryAlternativeSources(url, runtime);\n      }\n\n      // Check for CAPTCHA\n      const captchaDetected = await this.detectCaptcha(page);\n      if (captchaDetected) {\n        await this.solveCaptcha(page, url);\n      }\n      const documentTitle = await page.evaluate(() => document.title);\n      const bodyContent = await page.evaluate(() => document.body.innerText);\n      const { title: parsedTitle, description } = await generateSummary(runtime, documentTitle + \"\\n\" + bodyContent);\n      const content = { title: parsedTitle, description, bodyContent };\n      await runtime.cacheManager.set(`${this.cacheKey}/${cacheKey}`, {\n        url,\n        content,\n      });\n      return content;\n    } catch (error) {\n      elizaLogger.error(\"Error:\", error);\n      return {\n        title: url,\n        description: \"Error, could not fetch content\",\n        bodyContent: \"\",\n      };\n    } finally {\n      if (page) {\n        await page.close();\n      }\n    }\n  }\n\n  private async detectCaptcha(page: Page): Promise<boolean> {\n    const captchaSelectors = ['iframe[src*=\"captcha\"]', 'div[class*=\"captcha\"]', \"#captcha\", \".g-recaptcha\", \".h-captcha\"];\n\n    for (const selector of captchaSelectors) {\n      const element = await page.$(selector);\n      if (element) return true;\n    }\n\n    return false;\n  }\n\n  private async solveCaptcha(page: Page, url: string): Promise<void> {\n    try {\n      const hcaptchaKey = await this.getHCaptchaWebsiteKey(page);\n      if (hcaptchaKey) {\n        const solution = await this.captchaSolver.hcaptchaProxyless({\n          websiteURL: url,\n          websiteKey: hcaptchaKey,\n        });\n        await page.evaluate((token) => {\n          // eslint-disable-next-line\n          // @ts-ignore\n          window.hcaptcha.setResponse(token);\n        }, solution.gRecaptchaResponse);\n        return;\n      }\n\n      const recaptchaKey = await this.getReCaptchaWebsiteKey(page);\n      if (recaptchaKey) {\n        const solution = await this.captchaSolver.recaptchaV2Proxyless({\n          websiteURL: url,\n          websiteKey: recaptchaKey,\n        });\n        await page.evaluate((token) => {\n          // eslint-disable-next-line\n          // @ts-ignore\n          document.getElementById(\"g-recaptcha-response\").innerHTML = token;\n        }, solution.gRecaptchaResponse);\n      }\n    } catch (error) {\n      elizaLogger.error(\"Error solving CAPTCHA:\", error);\n    }\n  }\n\n  private async getHCaptchaWebsiteKey(page: Page): Promise<string> {\n    return page.evaluate(() => {\n      const hcaptchaIframe = document.querySelector('iframe[src*=\"hcaptcha.com\"]');\n      if (hcaptchaIframe) {\n        const src = hcaptchaIframe.getAttribute(\"src\");\n        const match = src?.match(/sitekey=([^&]*)/);\n        return match ? match[1] : \"\";\n      }\n      return \"\";\n    });\n  }\n\n  private async getReCaptchaWebsiteKey(page: Page): Promise<string> {\n    return page.evaluate(() => {\n      const recaptchaElement = document.querySelector(\".g-recaptcha\");\n      return recaptchaElement ? recaptchaElement.getAttribute(\"data-sitekey\") || \"\" : \"\";\n    });\n  }\n\n  private async tryAlternativeSources(url: string, runtime: IAgentRuntime): Promise<{ title: string; description: string; bodyContent: string }> {\n    // Try Internet Archive\n    const archiveUrl = `https://web.archive.org/web/${url}`;\n    try {\n      return await this.fetchPageContent(archiveUrl, runtime);\n    } catch (error) {\n      elizaLogger.error(\"Error fetching from Internet Archive:\", error);\n    }\n\n    // Try Google Search as a last resort\n    const googleSearchUrl = `https://www.google.com/search?q=${encodeURIComponent(url)}`;\n    try {\n      return await this.fetchPageContent(googleSearchUrl, runtime);\n    } catch (error) {\n      elizaLogger.error(\"Error fetching from Google Search:\", error);\n      elizaLogger.error(\"Failed to fetch content from alternative sources\");\n      return {\n        title: url,\n        description: \"Error, could not fetch content from alternative sources\",\n        bodyContent: \"\",\n      };\n    }\n  }\n}\n","import {\n    BrowserService,\n} from \"./services/browser\"\n\nexport const browserPlugin = {\n  name: \"default\",\n  description: \"Default plugin, with basic actions and evaluators\",\n  services: [new BrowserService() as any],\n  actions: [],\n};\n\nexport default browserPlugin;"],"mappings":"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","names":[]}