{"version":3,"sources":["../src/services/browser.ts","../src/index.ts"],"sourcesContent":["import { generateText, type IBrowserService, trimTokens } from \"@elizaos/core\";\nimport { parseJSONObjectFromText } from \"@elizaos/core\";\nimport { Service } from \"@elizaos/core\";\nimport { settings } from \"@elizaos/core\";\nimport { type IAgentRuntime, ModelClass, ServiceType } from \"@elizaos/core\";\nimport { stringToUuid } from \"@elizaos/core\";\nimport { PlaywrightBlocker } from \"@cliqz/adblocker-playwright\";\nimport CaptchaSolver from \"capsolver-npm\";\nimport { type Browser, type BrowserContext, chromium, type Page } from \"playwright\";\nimport { elizaLogger } from \"@elizaos/core\";\n\nasync function generateSummary(\n    runtime: IAgentRuntime,\n    text: string\n): Promise<{ title: string; description: string }> {\n    // make sure text is under 128k characters\n    text = await trimTokens(text, 100000, runtime);\n\n    const prompt = `Please generate a concise summary for the following text:\n\n  Text: \"\"\"\n  ${text}\n  \"\"\"\n\n  Respond with a JSON object in the following format:\n  \\`\\`\\`json\n  {\n    \"title\": \"Generated Title\",\n    \"summary\": \"Generated summary and/or description of the text\"\n  }\n  \\`\\`\\``;\n\n    const response = await generateText({\n        runtime,\n        context: prompt,\n        modelClass: ModelClass.SMALL,\n    });\n\n    const parsedResponse = parseJSONObjectFromText(response);\n\n    if (parsedResponse) {\n        return {\n            title: parsedResponse.title,\n            description: parsedResponse.summary,\n        };\n    }\n\n    return {\n        title: \"\",\n        description: \"\",\n    };\n}\n\ntype PageContent = {\n    title: string;\n    description: string;\n    bodyContent: string;\n};\n\nexport class BrowserService extends Service implements IBrowserService {\n    private browser: Browser | undefined;\n    private context: BrowserContext | undefined;\n    private blocker: PlaywrightBlocker | undefined;\n    private captchaSolver: CaptchaSolver;\n    private cacheKey = \"content/browser\";\n\n    static serviceType: ServiceType = ServiceType.BROWSER;\n\n    static register(runtime: IAgentRuntime): IAgentRuntime {\n        // since we are lazy loading, do nothing\n        return runtime;\n    }\n\n    getInstance(): IBrowserService {\n        return BrowserService.getInstance();\n    }\n\n    constructor() {\n        super();\n        this.browser = undefined;\n        this.context = undefined;\n        this.blocker = undefined;\n        this.captchaSolver = new CaptchaSolver(\n            settings.CAPSOLVER_API_KEY || \"\"\n        );\n    }\n\n    async initialize() {}\n\n    async initializeBrowser() {\n        if (!this.browser) {\n            this.browser = await chromium.launch({\n                headless: true,\n                args: [\n                    \"--disable-dev-shm-usage\", // Uses /tmp instead of /dev/shm. Prevents memory issues on low-memory systems\n                    \"--block-new-web-contents\", // Prevents creation of new windows/tabs\n                ],\n            });\n\n            const platform = process.platform;\n            let userAgent = \"\";\n\n            // Change the user agent to match the platform to reduce bot detection\n            switch (platform) {\n                case \"darwin\":\n                    userAgent =\n                        \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\";\n                    break;\n                case \"win32\":\n                    userAgent =\n                        \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\";\n                    break;\n                case \"linux\":\n                    userAgent =\n                        \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\";\n                    break;\n                default:\n                    userAgent =\n                        \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\";\n            }\n\n            this.context = await this.browser.newContext({\n                userAgent,\n                acceptDownloads: false,\n            });\n\n            this.blocker =\n                await PlaywrightBlocker.fromPrebuiltAdsAndTracking(fetch);\n        }\n    }\n\n    async closeBrowser() {\n        if (this.context) {\n            await this.context.close();\n            this.context = undefined;\n        }\n        if (this.browser) {\n            await this.browser.close();\n            this.browser = undefined;\n        }\n    }\n\n    async getPageContent(\n        url: string,\n        runtime: IAgentRuntime\n    ): Promise<PageContent> {\n        await this.initializeBrowser();\n        return await this.fetchPageContent(url, runtime);\n    }\n\n    private getCacheKey(url: string): string {\n        return stringToUuid(url);\n    }\n\n    private async fetchPageContent(\n        url: string,\n        runtime: IAgentRuntime\n    ): Promise<PageContent> {\n        const cacheKey = this.getCacheKey(url);\n        const cached = await runtime.cacheManager.get<{\n            url: string;\n            content: PageContent;\n        }>(`${this.cacheKey}/${cacheKey}`);\n\n        if (cached) {\n            return cached.content;\n        }\n\n        let page: Page | undefined;\n\n        try {\n            if (!this.context) {\n                elizaLogger.log(\n                    \"Browser context not initialized. Call initializeBrowser() first.\"\n                );\n                throw new Error(\"Browser context not initialized\");\n            }\n\n            page = await this.context.newPage();\n\n            if (!page) {\n                throw new Error(\"Failed to create new page\");\n            }\n\n            // Enable stealth mode\n            await page.setExtraHTTPHeaders({\n                \"Accept-Language\": \"en-US,en;q=0.9\",\n            });\n\n            // Apply ad blocker\n            if (this.blocker) {\n                await this.blocker.enableBlockingInPage(page);\n            }\n\n            const response = await page.goto(url, { waitUntil: \"networkidle\" });\n\n            if (!response) {\n                elizaLogger.error(\"Failed to load the page\");\n                throw new Error(\"Failed to load the page\");\n            }\n\n            if (response.status() === 403 || response.status() === 404) {\n                return await this.tryAlternativeSources(url, runtime);\n            }\n\n            // Check for CAPTCHA\n            const captchaDetected = await this.detectCaptcha(page);\n            if (captchaDetected) {\n                await this.solveCaptcha(page, url);\n            }\n            const documentTitle = await page.evaluate(() => document.title);\n            const bodyContent = await page.evaluate(\n                () => document.body.innerText\n            );\n            const { title: parsedTitle, description } = await generateSummary(\n                runtime,\n                documentTitle + \"\\n\" + bodyContent\n            );\n            const content = { title: parsedTitle, description, bodyContent };\n            await runtime.cacheManager.set(`${this.cacheKey}/${cacheKey}`, {\n                url,\n                content,\n            });\n            return content;\n        } catch (error) {\n            elizaLogger.error(\"Error:\", error);\n            return {\n                title: url,\n                description: \"Error, could not fetch content\",\n                bodyContent: \"\",\n            };\n        } finally {\n            if (page) {\n                await page.close();\n            }\n        }\n    }\n\n    private async detectCaptcha(page: Page): Promise<boolean> {\n        const captchaSelectors = [\n            'iframe[src*=\"captcha\"]',\n            'div[class*=\"captcha\"]',\n            \"#captcha\",\n            \".g-recaptcha\",\n            \".h-captcha\",\n        ];\n\n        for (const selector of captchaSelectors) {\n            const element = await page.$(selector);\n            if (element) return true;\n        }\n\n        return false;\n    }\n\n    private async solveCaptcha(page: Page, url: string): Promise<void> {\n        try {\n            const hcaptchaKey = await this.getHCaptchaWebsiteKey(page);\n            if (hcaptchaKey) {\n                const solution = await this.captchaSolver.hcaptchaProxyless({\n                    websiteURL: url,\n                    websiteKey: hcaptchaKey,\n                });\n                await page.evaluate((token) => {\n                    // eslint-disable-next-line\n                    // @ts-ignore\n                    window.hcaptcha.setResponse(token);\n                }, solution.gRecaptchaResponse);\n                return;\n            }\n\n            const recaptchaKey = await this.getReCaptchaWebsiteKey(page);\n            if (recaptchaKey) {\n                const solution = await this.captchaSolver.recaptchaV2Proxyless({\n                    websiteURL: url,\n                    websiteKey: recaptchaKey,\n                });\n                await page.evaluate((token) => {\n                    // eslint-disable-next-line\n                    // @ts-ignore\n                    document.getElementById(\"g-recaptcha-response\").innerHTML =\n                        token;\n                }, solution.gRecaptchaResponse);\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error solving CAPTCHA:\", error);\n        }\n    }\n\n    private async getHCaptchaWebsiteKey(page: Page): Promise<string> {\n        return page.evaluate(() => {\n            const hcaptchaIframe = document.querySelector(\n                'iframe[src*=\"hcaptcha.com\"]'\n            );\n            if (hcaptchaIframe) {\n                const src = hcaptchaIframe.getAttribute(\"src\");\n                const match = src?.match(/sitekey=([^&]*)/);\n                return match ? match[1] : \"\";\n            }\n            return \"\";\n        });\n    }\n\n    private async getReCaptchaWebsiteKey(page: Page): Promise<string> {\n        return page.evaluate(() => {\n            const recaptchaElement = document.querySelector(\".g-recaptcha\");\n            return recaptchaElement\n                ? recaptchaElement.getAttribute(\"data-sitekey\") || \"\"\n                : \"\";\n        });\n    }\n\n    private async tryAlternativeSources(\n        url: string,\n        runtime: IAgentRuntime\n    ): Promise<{ title: string; description: string; bodyContent: string }> {\n        // Try Internet Archive\n        const archiveUrl = `https://web.archive.org/web/${url}`;\n        try {\n            return await this.fetchPageContent(archiveUrl, runtime);\n        } catch (error) {\n            elizaLogger.error(\"Error fetching from Internet Archive:\", error);\n        }\n\n        // Try Google Search as a last resort\n        const googleSearchUrl = `https://www.google.com/search?q=${encodeURIComponent(url)}`;\n        try {\n            return await this.fetchPageContent(googleSearchUrl, runtime);\n        } catch (error) {\n            elizaLogger.error(\"Error fetching from Google Search:\", error);\n            elizaLogger.error(\n                \"Failed to fetch content from alternative sources\"\n            );\n            return {\n                title: url,\n                description:\n                    \"Error, could not fetch content from alternative sources\",\n                bodyContent: \"\",\n            };\n        }\n    }\n}","import {\n    BrowserService,\n} from \"./services/browser\"\n\nexport const browserPlugin = {\n  name: \"default\",\n  description: \"Default plugin, with basic actions and evaluators\",\n  services: [new BrowserService()],\n  actions: [],\n};\n\nexport default browserPlugin;"],"mappings":";AAAA,SAAS,cAAoC,kBAAkB;AAC/D,SAAS,+BAA+B;AACxC,SAAS,eAAe;AACxB,SAAS,gBAAgB;AACzB,SAA6B,YAAY,mBAAmB;AAC5D,SAAS,oBAAoB;AAC7B,SAAS,yBAAyB;AAClC,OAAO,mBAAmB;AAC1B,SAA4C,gBAA2B;AACvE,SAAS,mBAAmB;AAE5B,eAAe,gBACX,SACA,MAC+C;AAE/C,SAAO,MAAM,WAAW,MAAM,KAAQ,OAAO;AAE7C,QAAM,SAAS;AAAA;AAAA;AAAA,IAGf,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWJ,QAAM,WAAW,MAAM,aAAa;AAAA,IAChC;AAAA,IACA,SAAS;AAAA,IACT,YAAY,WAAW;AAAA,EAC3B,CAAC;AAED,QAAM,iBAAiB,wBAAwB,QAAQ;AAEvD,MAAI,gBAAgB;AAChB,WAAO;AAAA,MACH,OAAO,eAAe;AAAA,MACtB,aAAa,eAAe;AAAA,IAChC;AAAA,EACJ;AAEA,SAAO;AAAA,IACH,OAAO;AAAA,IACP,aAAa;AAAA,EACjB;AACJ;AAQO,IAAM,kBAAN,MAAM,wBAAuB,QAAmC;AAAA,EAkBnE,cAAc;AACV,UAAM;AAdV,SAAQ,WAAW;AAef,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,UAAU;AACf,SAAK,gBAAgB,IAAI;AAAA,MACrB,SAAS,qBAAqB;AAAA,IAClC;AAAA,EACJ;AAAA,EAjBA,OAAO,SAAS,SAAuC;AAEnD,WAAO;AAAA,EACX;AAAA,EAEA,cAA+B;AAC3B,WAAO,gBAAe,YAAY;AAAA,EACtC;AAAA,EAYA,MAAM,aAAa;AAAA,EAAC;AAAA,EAEpB,MAAM,oBAAoB;AACtB,QAAI,CAAC,KAAK,SAAS;AACf,WAAK,UAAU,MAAM,SAAS,OAAO;AAAA,QACjC,UAAU;AAAA,QACV,MAAM;AAAA,UACF;AAAA;AAAA,UACA;AAAA;AAAA,QACJ;AAAA,MACJ,CAAC;AAED,YAAM,WAAW,QAAQ;AACzB,UAAI,YAAY;AAGhB,cAAQ,UAAU;AAAA,QACd,KAAK;AACD,sBACI;AACJ;AAAA,QACJ,KAAK;AACD,sBACI;AACJ;AAAA,QACJ,KAAK;AACD,sBACI;AACJ;AAAA,QACJ;AACI,sBACI;AAAA,MACZ;AAEA,WAAK,UAAU,MAAM,KAAK,QAAQ,WAAW;AAAA,QACzC;AAAA,QACA,iBAAiB;AAAA,MACrB,CAAC;AAED,WAAK,UACD,MAAM,kBAAkB,2BAA2B,KAAK;AAAA,IAChE;AAAA,EACJ;AAAA,EAEA,MAAM,eAAe;AACjB,QAAI,KAAK,SAAS;AACd,YAAM,KAAK,QAAQ,MAAM;AACzB,WAAK,UAAU;AAAA,IACnB;AACA,QAAI,KAAK,SAAS;AACd,YAAM,KAAK,QAAQ,MAAM;AACzB,WAAK,UAAU;AAAA,IACnB;AAAA,EACJ;AAAA,EAEA,MAAM,eACF,KACA,SACoB;AACpB,UAAM,KAAK,kBAAkB;AAC7B,WAAO,MAAM,KAAK,iBAAiB,KAAK,OAAO;AAAA,EACnD;AAAA,EAEQ,YAAY,KAAqB;AACrC,WAAO,aAAa,GAAG;AAAA,EAC3B;AAAA,EAEA,MAAc,iBACV,KACA,SACoB;AACpB,UAAM,WAAW,KAAK,YAAY,GAAG;AACrC,UAAM,SAAS,MAAM,QAAQ,aAAa,IAGvC,GAAG,KAAK,QAAQ,IAAI,QAAQ,EAAE;AAEjC,QAAI,QAAQ;AACR,aAAO,OAAO;AAAA,IAClB;AAEA,QAAI;AAEJ,QAAI;AACA,UAAI,CAAC,KAAK,SAAS;AACf,oBAAY;AAAA,UACR;AAAA,QACJ;AACA,cAAM,IAAI,MAAM,iCAAiC;AAAA,MACrD;AAEA,aAAO,MAAM,KAAK,QAAQ,QAAQ;AAElC,UAAI,CAAC,MAAM;AACP,cAAM,IAAI,MAAM,2BAA2B;AAAA,MAC/C;AAGA,YAAM,KAAK,oBAAoB;AAAA,QAC3B,mBAAmB;AAAA,MACvB,CAAC;AAGD,UAAI,KAAK,SAAS;AACd,cAAM,KAAK,QAAQ,qBAAqB,IAAI;AAAA,MAChD;AAEA,YAAM,WAAW,MAAM,KAAK,KAAK,KAAK,EAAE,WAAW,cAAc,CAAC;AAElE,UAAI,CAAC,UAAU;AACX,oBAAY,MAAM,yBAAyB;AAC3C,cAAM,IAAI,MAAM,yBAAyB;AAAA,MAC7C;AAEA,UAAI,SAAS,OAAO,MAAM,OAAO,SAAS,OAAO,MAAM,KAAK;AACxD,eAAO,MAAM,KAAK,sBAAsB,KAAK,OAAO;AAAA,MACxD;AAGA,YAAM,kBAAkB,MAAM,KAAK,cAAc,IAAI;AACrD,UAAI,iBAAiB;AACjB,cAAM,KAAK,aAAa,MAAM,GAAG;AAAA,MACrC;AACA,YAAM,gBAAgB,MAAM,KAAK,SAAS,MAAM,SAAS,KAAK;AAC9D,YAAM,cAAc,MAAM,KAAK;AAAA,QAC3B,MAAM,SAAS,KAAK;AAAA,MACxB;AACA,YAAM,EAAE,OAAO,aAAa,YAAY,IAAI,MAAM;AAAA,QAC9C;AAAA,QACA,gBAAgB,OAAO;AAAA,MAC3B;AACA,YAAM,UAAU,EAAE,OAAO,aAAa,aAAa,YAAY;AAC/D,YAAM,QAAQ,aAAa,IAAI,GAAG,KAAK,QAAQ,IAAI,QAAQ,IAAI;AAAA,QAC3D;AAAA,QACA;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,kBAAY,MAAM,UAAU,KAAK;AACjC,aAAO;AAAA,QACH,OAAO;AAAA,QACP,aAAa;AAAA,QACb,aAAa;AAAA,MACjB;AAAA,IACJ,UAAE;AACE,UAAI,MAAM;AACN,cAAM,KAAK,MAAM;AAAA,MACrB;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAc,cAAc,MAA8B;AACtD,UAAM,mBAAmB;AAAA,MACrB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAEA,eAAW,YAAY,kBAAkB;AACrC,YAAM,UAAU,MAAM,KAAK,EAAE,QAAQ;AACrC,UAAI,QAAS,QAAO;AAAA,IACxB;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,MAAc,aAAa,MAAY,KAA4B;AAC/D,QAAI;AACA,YAAM,cAAc,MAAM,KAAK,sBAAsB,IAAI;AACzD,UAAI,aAAa;AACb,cAAM,WAAW,MAAM,KAAK,cAAc,kBAAkB;AAAA,UACxD,YAAY;AAAA,UACZ,YAAY;AAAA,QAChB,CAAC;AACD,cAAM,KAAK,SAAS,CAAC,UAAU;AAG3B,iBAAO,SAAS,YAAY,KAAK;AAAA,QACrC,GAAG,SAAS,kBAAkB;AAC9B;AAAA,MACJ;AAEA,YAAM,eAAe,MAAM,KAAK,uBAAuB,IAAI;AAC3D,UAAI,cAAc;AACd,cAAM,WAAW,MAAM,KAAK,cAAc,qBAAqB;AAAA,UAC3D,YAAY;AAAA,UACZ,YAAY;AAAA,QAChB,CAAC;AACD,cAAM,KAAK,SAAS,CAAC,UAAU;AAG3B,mBAAS,eAAe,sBAAsB,EAAE,YAC5C;AAAA,QACR,GAAG,SAAS,kBAAkB;AAAA,MAClC;AAAA,IACJ,SAAS,OAAO;AACZ,kBAAY,MAAM,0BAA0B,KAAK;AAAA,IACrD;AAAA,EACJ;AAAA,EAEA,MAAc,sBAAsB,MAA6B;AAC7D,WAAO,KAAK,SAAS,MAAM;AACvB,YAAM,iBAAiB,SAAS;AAAA,QAC5B;AAAA,MACJ;AACA,UAAI,gBAAgB;AAChB,cAAM,MAAM,eAAe,aAAa,KAAK;AAC7C,cAAM,QAAQ,KAAK,MAAM,iBAAiB;AAC1C,eAAO,QAAQ,MAAM,CAAC,IAAI;AAAA,MAC9B;AACA,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA,EAEA,MAAc,uBAAuB,MAA6B;AAC9D,WAAO,KAAK,SAAS,MAAM;AACvB,YAAM,mBAAmB,SAAS,cAAc,cAAc;AAC9D,aAAO,mBACD,iBAAiB,aAAa,cAAc,KAAK,KACjD;AAAA,IACV,CAAC;AAAA,EACL;AAAA,EAEA,MAAc,sBACV,KACA,SACoE;AAEpE,UAAM,aAAa,+BAA+B,GAAG;AACrD,QAAI;AACA,aAAO,MAAM,KAAK,iBAAiB,YAAY,OAAO;AAAA,IAC1D,SAAS,OAAO;AACZ,kBAAY,MAAM,yCAAyC,KAAK;AAAA,IACpE;AAGA,UAAM,kBAAkB,mCAAmC,mBAAmB,GAAG,CAAC;AAClF,QAAI;AACA,aAAO,MAAM,KAAK,iBAAiB,iBAAiB,OAAO;AAAA,IAC/D,SAAS,OAAO;AACZ,kBAAY,MAAM,sCAAsC,KAAK;AAC7D,kBAAY;AAAA,QACR;AAAA,MACJ;AACA,aAAO;AAAA,QACH,OAAO;AAAA,QACP,aACI;AAAA,QACJ,aAAa;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ;AACJ;AA1Ra,gBAOF,cAA2B,YAAY;AAP3C,IAAM,iBAAN;;;ACvDA,IAAM,gBAAgB;AAAA,EAC3B,MAAM;AAAA,EACN,aAAa;AAAA,EACb,UAAU,CAAC,IAAI,eAAe,CAAC;AAAA,EAC/B,SAAS,CAAC;AACZ;AAEA,IAAO,gBAAQ;","names":[]}